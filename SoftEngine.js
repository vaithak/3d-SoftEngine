class SoftEngine {
    constructor() {
        this.wireframe = 0;
        this.rastered  = 1;
        this.shaded    = 0;
        this.textured  = 0;
    }
}

SoftEngine.Camera = class {
    constructor() {
        this.Position = BABYLON.Vector3.Zero();
        this.Target   = BABYLON.Vector3.Zero();
        this.Up       = BABYLON.Vector3.Up();
    }
}

SoftEngine.Mesh = class {
    constructor(name, verticesCount, facesCount) {
        this.name     = name;
        this.Vertices = new Array(verticesCount);
        this.Faces    = new Array(facesCount);
        this.Rotation = BABYLON.Vector3.Zero();
        this.Position = BABYLON.Vector3.Zero();
    }
}

SoftEngine.Device = class {
    constructor(canvas) {
        this.workingCanvas  = canvas;
        this.workingWidth   = canvas.width;
        this.workingHeight  = canvas.height;
        this.workingContext = this.workingCanvas.getContext("2d");
        this.depthbuffer = new Array(this.workingWidth * this.workingHeight);
    }

    LoadJSONFile(filename, callback) {
        let currObj = this;
        $.getJSON( filename, function(data) {
            callback(currObj.createMeshes(data))
        });
    }

    // Specific to the file format generated by Babylon.js
    createMeshes(jsonObject) {
        var meshes = [];
        for(var meshIndex = 0; meshIndex < jsonObject.meshes.length; meshIndex++) {
            var verticesArray = (jsonObject.meshes[meshIndex].vertices) || (jsonObject.meshes[meshIndex].positions);
            // Faces
            var indicesArray = jsonObject.meshes[meshIndex].indices;

            var uvCount = jsonObject.meshes[meshIndex].uvCount;
            var verticesStep = 1;

            // Depending of the number of texture's coordinates per vertex
            // we're jumping in the vertices array  by 6, 8 & 10 windows frame
            switch(uvCount) {
                case 0:
                    verticesStep = 6;
                    break;
                case 1:
                    verticesStep = 8;
                    break;
                case 2:
                    verticesStep = 10;
                    break;
            }

            // the number of interesting vertices information for us
            var verticesCount = verticesArray.length / verticesStep;
            // number of faces is logically the size of the array divided by 3 (A, B, C)
            var facesCount = indicesArray.length / 3;
            var mesh = new SoftEngine.Mesh(jsonObject.meshes[meshIndex].name, verticesCount, facesCount);

            // Filling the Vertices array of our mesh first
            for (var index = 0; index < verticesCount; index++) {
                var x = verticesArray[index * verticesStep];
                var y = verticesArray[index * verticesStep + 1];
                var z = verticesArray[index * verticesStep + 2];
                mesh.Vertices[index] = new BABYLON.Vector3(x, y, z);
            }

            // Then filling the Faces array
            for(var index = 0; index < facesCount; index++) {
                var a = indicesArray[index * 3];
                var b = indicesArray[index * 3 + 1];
                var c = indicesArray[index * 3 + 2];
                mesh.Faces[index] = {
                    A: a,
                    B: b,
                    C: c
                };
            }

            // Getting the position you've set in Blender
            var position = jsonObject.meshes[meshIndex].position;
            mesh.Position = new BABYLON.Vector3(position[0], position[1], position[2]);
            meshes.push(mesh);
        }
        return meshes;
    }

    clear() {
        // Note: the back buffer size is equal to the number of pixels to draw
        // on screen (width*height) * 4 (R,G,B & Alpha values). 
        // Clearing with black color by default
        this.workingContext.clearRect(0, 0, this.workingWidth, this.workingHeight);
        this.backbuffer = this.workingContext.getImageData(0, 0, this.workingWidth, this.workingHeight);

        // Clearing depth buffer
        for (let i = 0; i < this.depthbuffer.length; i++) {
            // Max possible value 
            this.depthbuffer[i] = 10000000;
        }
    }

    // Once everything is ready, we can flush the back buffer into the front buffer. 
    present () {
        this.workingContext.putImageData(this.backbuffer, 0, 0);
    }

    // Called to put a pixel on screen at a specific X,Y coordinates
    // point is of type Vector3 as point.z is used for Depth Buffer
    drawPoint(point, color) {
        // Clipping what's visible on screen
        if (point.x >= 0 && point.y >= 0 && point.x < this.workingWidth && point.y < this.workingHeight) {
            let x = point.x;
            let y = point.y;
            let z = point.z;
            let index = ((x >> 0) + (y >> 0) * this.workingWidth);

            // Discard if behind an already painted object
            if(this.depthbuffer[index] < z) {
                return;
            }
        
            this.depthbuffer[index] = z;
            this.backbuffer.data[4*index] = color.r * 255;
            this.backbuffer.data[4*index + 1] = color.g * 255;
            this.backbuffer.data[4*index + 2] = color.b * 255;
            this.backbuffer.data[4*index + 3] = color.a * 255;
        }
    }

    // Draw Line between 2 points using breshnam's Algorithm
    breshnamDrawLine (point0, point1) {
        var x0 = point0.x >> 0;
        var y0 = point0.y >> 0;
        var x1 = point1.x >> 0;
        var y1 = point1.y >> 0;
        var dx = Math.abs(x1 - x0);
        var dy = Math.abs(y1 - y0);
        let color = new BABYLON.Color4(1,1,0,1);

        if(dy > dx){
            let sx = (x0 < x1) ? 1 : -1;
            let sy = (y0 < y1) ? 1 : -1;
            let err = dx - dy;

            for(let y=y0; y!=y1; y=y+sy){
                this.drawPoint(new BABYLON.Vector2(x0, y), color);
                if(err >= 0) {
                    x0 += sx ;
                    err -= dy;
                }
                err += dx;
            }
        }
        else{
            let sx = (x0 < x1) ? 1 : -1;
            let sy = (y0 < y1) ? 1 : -1;
            let err = dy - dx;

            for(let x=x0; x!=x1; x=x+sx){
                this.drawPoint(new BABYLON.Vector2(x, y0), color);
                if(err >= 0) {
                    y0 += sy ;
                    err -= dx;
                }
                err += dy;
            }
        }
    }

    // projectPointOnScreen takes some 3D coordinates and transform them
    // in 2D coordinates using the transformation matrix
    projectPointOnScreen (coord, transMat) {
        let point = BABYLON.Vector3.TransformCoordinates(coord, transMat);
        // The transformed coordinates will be based on coordinate system
        // starting on the center of the screen. But drawing on screen normally starts
        // from top left. We then need to transform them again to have x:0, y:0 on top left.
        // As they are currently inside a [-1,1] cube on all axes.
        let x = point.x * this.workingWidth + this.workingWidth / 2.0 ;
        let y = -point.y * this.workingHeight + this.workingHeight / 2.0;

        // Z-cordinate is for z-buffer
        return (new BABYLON.Vector3(x, y, point.z));
    }

    clamp (value, min, max) {
        if (typeof min === "undefined") { min = 0; }
        if (typeof max === "undefined") { max = 1; }
        return Math.max(min, Math.min(value, max));
    }

    // Rasterization of Triangles using Scanline conversion
    processScanLine (y, pa, pb, pc, pd, color) {
        let gradient1 = pa.y != pb.y ? (y - pa.y) / (pb.y - pa.y) : 1;
        let gradient2 = pc.y != pd.y ? (y - pc.y) / (pd.y - pc.y) : 1;
    
        let sx = (pa.x + (pb.x - pa.x)*this.clamp(gradient1)) >> 0;
        let ex = (pc.x + (pd.x - pc.x)*this.clamp(gradient2)) >> 0;

        // starting Z & ending Z
        let z1 = (pa.z + (pb.z - pa.z)*this.clamp(gradient1)) ;
        let z2 = (pc.z + (pd.z - pc.z)*this.clamp(gradient2)) ;
    
        // drawing a line from left (sx) to right (ex) 
        for(let x = sx; x < ex; x++) {
            let gradient = (x - sx) / (ex - sx);
            let z = (z1 + (z2 - z1)*this.clamp(gradient));
            this.drawPoint(new BABYLON.Vector3(x, y, z), color);
        }
    }

    drawTriangle (p1, p2, p3, color) {
        // Sorting the points in order to always have this order on screen p1, p2 & p3
        // with p1 always up (thus having the Y the lowest possible to be near the top screen)
        // then p2 between p1 & p3
        if(p1.y > p2.y) {
            var temp = p2;
            p2 = p1;
            p1 = temp;
        }
        if(p2.y > p3.y) {
            var temp = p2;
            p2 = p3;
            p3 = temp;
        }
        if(p1.y > p2.y) {
            var temp = p2;
            p2 = p1;
            p1 = temp;
        }
    
        // Computing slopes
        let invSlopeP1P2, invSlopeP1P3;
        if(p2.y > p1.y) {
            invSlopeP1P2 = (p2.x - p1.x) / (p2.y - p1.y);
        } else {
            // For easy calculation
            invSlopeP1P2 = 0;
        }
    
        if(p3.y - p1.y > 0) {
            invSlopeP1P3 = (p3.x - p1.x) / (p3.y - p1.y);
        } else {
            // For easy calculation
            invSlopeP1P3 = 0;
        }
    
        // Case where triangles are like that:
        // P1
        // -
        // -- 
        // - -
        // -  -
        // -   - P2
        // -  -
        // - -
        // -
        // P3
        if(invSlopeP1P2 > invSlopeP1P3) {
            for(var y = p1.y >> 0; y <= p3.y >> 0; y++) {
                if(y < p2.y) {
                    this.processScanLine(y, p1, p3, p1, p2, color);
                } else {
                    this.processScanLine(y, p1, p3, p2, p3, color);
                }
            }
        }
        // Case where triangles are like that:
        //       P1
        //        -
        //       -- 
        //      - -
        //     -  -
        // P2 -   - 
        //     -  -
        //      - -
        //        -
        //       P3
        else {
            for(var y = p1.y >> 0; y <= p3.y >> 0; y++) {
                if(y < p2.y) {
                    this.processScanLine(y, p1, p2, p1, p3, color);
                } else {
                    this.processScanLine(y, p2, p3, p1, p3, color);
                }
            }
        }
    }

    // The main method of the engine that re-compute each vertex projection during each frame
    render (camera, meshes, engine) {
        // To understand this part, please read the prerequisites resources
        let viewMatrix = BABYLON.Matrix.LookAtLH(camera.Position, camera.Target, camera.Up);
        let projectionMatrix = BABYLON.Matrix.PerspectiveFovLH(0.78, this.workingWidth / this.workingHeight, 0.01, 1.0);

        meshes.forEach((cMesh) => {
            // Calculating Transformation Matrix
            let worldMatrix = BABYLON.Matrix.RotationYawPitchRoll(cMesh.Rotation.y, cMesh.Rotation.x, cMesh.Rotation.z)
                                .multiply(BABYLON.Matrix.Translation(cMesh.Position.x, cMesh.Position.y, cMesh.Position.z));

            let transformMatrix = worldMatrix.multiply(viewMatrix).multiply(projectionMatrix);

            // for (let i = 0; i < cMesh.Vertices.length -1; i++){
            //     let point0 = this.projectPointOnScreen(cMesh.Vertices[i], transformMatrix);
            //     let point1 = this.projectPointOnScreen(cMesh.Vertices[i + 1], transformMatrix);
            //     this.breshnamDrawLine(point0, point1);
            // }

            cMesh.Faces.forEach((currentFace, indexFaces) => {
                let vertexA = cMesh.Vertices[currentFace.A];
                let vertexB = cMesh.Vertices[currentFace.B];
                let vertexC = cMesh.Vertices[currentFace.C];

                let pixelA = this.projectPointOnScreen(vertexA, transformMatrix);
                let pixelB = this.projectPointOnScreen(vertexB, transformMatrix);
                let pixelC = this.projectPointOnScreen(vertexC, transformMatrix);

                // FOR WIREFRAME RENDERING
                if (engine.wireframe == 1){
                    this.breshnamDrawLine(pixelA, pixelB);
                    this.breshnamDrawLine(pixelB, pixelC);
                    this.breshnamDrawLine(pixelC, pixelA);
                }
                // FOR TRIANGLE RASTERIZATION
                else if (engine.rastered == 1){
                    let color = 0.25 + (indexFaces / cMesh.Faces.length) * 0.75;
                    this.drawTriangle(pixelA, pixelB, pixelC, new BABYLON.Color4(color, color, color, 1));
                }
            });
        });
    }
}